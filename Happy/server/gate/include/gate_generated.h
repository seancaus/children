// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GATE_SHARE_GATE_H_
#define FLATBUFFERS_GENERATED_GATE_SHARE_GATE_H_

#include "flatbuffers/flatbuffers.h"

namespace share {
namespace gate {

struct LoginRequest;

struct LoginReply;

struct Message;

enum Any {
  Any_NONE = 0,
  Any_LoginRequest = 1,
  Any_LoginReply = 2,
  Any_MIN = Any_NONE,
  Any_MAX = Any_LoginReply
};

inline Any (&EnumValuesAny())[3] {
  static Any values[] = {
    Any_NONE,
    Any_LoginRequest,
    Any_LoginReply
  };
  return values;
}

inline const char **EnumNamesAny() {
  static const char *names[] = {
    "NONE",
    "LoginRequest",
    "LoginReply",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<LoginRequest> {
  static const Any enum_value = Any_LoginRequest;
};

template<> struct AnyTraits<LoginReply> {
  static const Any enum_value = Any_LoginReply;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TOKEN = 4
  };
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.Verify(token()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(LoginRequest::VT_TOKEN, token);
  }
  explicit LoginRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginRequestBuilder &operator=(const LoginRequestBuilder &);
  flatbuffers::Offset<LoginRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginRequest> CreateLoginRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> token = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginRequest> CreateLoginRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  return share::gate::CreateLoginRequest(
      _fbb,
      token ? _fbb.CreateString(token) : 0);
}

struct LoginReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TOKEN = 4,
    VT_NICKNAME = 6
  };
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  const flatbuffers::String *nickName() const {
    return GetPointer<const flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.Verify(token()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.Verify(nickName()) &&
           verifier.EndTable();
  }
};

struct LoginReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(LoginReply::VT_TOKEN, token);
  }
  void add_nickName(flatbuffers::Offset<flatbuffers::String> nickName) {
    fbb_.AddOffset(LoginReply::VT_NICKNAME, nickName);
  }
  explicit LoginReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginReplyBuilder &operator=(const LoginReplyBuilder &);
  flatbuffers::Offset<LoginReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginReply> CreateLoginReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> token = 0,
    flatbuffers::Offset<flatbuffers::String> nickName = 0) {
  LoginReplyBuilder builder_(_fbb);
  builder_.add_nickName(nickName);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginReply> CreateLoginReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr,
    const char *nickName = nullptr) {
  return share::gate::CreateLoginReply(
      _fbb,
      token ? _fbb.CreateString(token) : 0,
      nickName ? _fbb.CreateString(nickName) : 0);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_OBJECT_TYPE = 6,
    VT_OBJECT = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  Any object_type() const {
    return static_cast<Any>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  const void *object() const {
    return GetPointer<const void *>(VT_OBJECT);
  }
  template<typename T> const T *object_as() const;
  const LoginRequest *object_as_LoginRequest() const {
    return object_type() == Any_LoginRequest ? static_cast<const LoginRequest *>(object()) : nullptr;
  }
  const LoginReply *object_as_LoginReply() const {
    return object_type() == Any_LoginReply ? static_cast<const LoginReply *>(object()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyOffset(verifier, VT_OBJECT) &&
           VerifyAny(verifier, object(), object_type()) &&
           verifier.EndTable();
  }
};

template<> inline const LoginRequest *Message::object_as<LoginRequest>() const {
  return object_as_LoginRequest();
}

template<> inline const LoginReply *Message::object_as<LoginReply>() const {
  return object_as_LoginReply();
}

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Message::VT_ID, id, 0);
  }
  void add_object_type(Any object_type) {
    fbb_.AddElement<uint8_t>(Message::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object(flatbuffers::Offset<void> object) {
    fbb_.AddOffset(Message::VT_OBJECT, object);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    Any object_type = Any_NONE,
    flatbuffers::Offset<void> object = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_id(id);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_LoginRequest: {
      auto ptr = reinterpret_cast<const LoginRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LoginReply: {
      auto ptr = reinterpret_cast<const LoginReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const share::gate::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<share::gate::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<share::gate::Message>(nullptr);
}

inline const char *MessageExtension() {
  return "mon";
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<share::gate::Message> root) {
  fbb.Finish(root);
}

}  // namespace gate
}  // namespace share

#endif  // FLATBUFFERS_GENERATED_GATE_SHARE_GATE_H_
