// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROOM_SHARE_COMMON_ROOM_H_
#define FLATBUFFERS_GENERATED_ROOM_SHARE_COMMON_ROOM_H_

#include "flatbuffers/flatbuffers.h"

namespace share {
namespace common {
namespace room {

struct JoinRequest;

struct JoinReply;

struct LeaveRequest;

struct LeaveReply;

struct Message;

enum Any {
  Any_NONE = 0,
  Any_JoinRequest = 1,
  Any_JoinReply = 2,
  Any_LeaveRequest = 3,
  Any_LeaveReply = 4,
  Any_MIN = Any_NONE,
  Any_MAX = Any_LeaveReply
};

inline Any (&EnumValuesAny())[5] {
  static Any values[] = {
    Any_NONE,
    Any_JoinRequest,
    Any_JoinReply,
    Any_LeaveRequest,
    Any_LeaveReply
  };
  return values;
}

inline const char **EnumNamesAny() {
  static const char *names[] = {
    "NONE",
    "JoinRequest",
    "JoinReply",
    "LeaveRequest",
    "LeaveReply",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<JoinRequest> {
  static const Any enum_value = Any_JoinRequest;
};

template<> struct AnyTraits<JoinReply> {
  static const Any enum_value = Any_JoinReply;
};

template<> struct AnyTraits<LeaveRequest> {
  static const Any enum_value = Any_LeaveRequest;
};

template<> struct AnyTraits<LeaveReply> {
  static const Any enum_value = Any_LeaveReply;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct JoinRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TABLEID = 4,
    VT_SEAT = 6
  };
  const flatbuffers::String *tableId() const {
    return GetPointer<const flatbuffers::String *>(VT_TABLEID);
  }
  int32_t seat() const {
    return GetField<int32_t>(VT_SEAT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLEID) &&
           verifier.Verify(tableId()) &&
           VerifyField<int32_t>(verifier, VT_SEAT) &&
           verifier.EndTable();
  }
};

struct JoinRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tableId(flatbuffers::Offset<flatbuffers::String> tableId) {
    fbb_.AddOffset(JoinRequest::VT_TABLEID, tableId);
  }
  void add_seat(int32_t seat) {
    fbb_.AddElement<int32_t>(JoinRequest::VT_SEAT, seat, 0);
  }
  explicit JoinRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinRequestBuilder &operator=(const JoinRequestBuilder &);
  flatbuffers::Offset<JoinRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<JoinRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<JoinRequest> CreateJoinRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> tableId = 0,
    int32_t seat = 0) {
  JoinRequestBuilder builder_(_fbb);
  builder_.add_seat(seat);
  builder_.add_tableId(tableId);
  return builder_.Finish();
}

inline flatbuffers::Offset<JoinRequest> CreateJoinRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *tableId = nullptr,
    int32_t seat = 0) {
  return share::common::room::CreateJoinRequest(
      _fbb,
      tableId ? _fbb.CreateString(tableId) : 0,
      seat);
}

struct JoinReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct JoinReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(JoinReply::VT_CODE, code, 0);
  }
  explicit JoinReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinReplyBuilder &operator=(const JoinReplyBuilder &);
  flatbuffers::Offset<JoinReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<JoinReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<JoinReply> CreateJoinReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0) {
  JoinReplyBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

struct LeaveRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TABLEID = 4
  };
  const flatbuffers::String *tableId() const {
    return GetPointer<const flatbuffers::String *>(VT_TABLEID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLEID) &&
           verifier.Verify(tableId()) &&
           verifier.EndTable();
  }
};

struct LeaveRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tableId(flatbuffers::Offset<flatbuffers::String> tableId) {
    fbb_.AddOffset(LeaveRequest::VT_TABLEID, tableId);
  }
  explicit LeaveRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LeaveRequestBuilder &operator=(const LeaveRequestBuilder &);
  flatbuffers::Offset<LeaveRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LeaveRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<LeaveRequest> CreateLeaveRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> tableId = 0) {
  LeaveRequestBuilder builder_(_fbb);
  builder_.add_tableId(tableId);
  return builder_.Finish();
}

inline flatbuffers::Offset<LeaveRequest> CreateLeaveRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *tableId = nullptr) {
  return share::common::room::CreateLeaveRequest(
      _fbb,
      tableId ? _fbb.CreateString(tableId) : 0);
}

struct LeaveReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct LeaveReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(LeaveReply::VT_CODE, code, 0);
  }
  explicit LeaveReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LeaveReplyBuilder &operator=(const LeaveReplyBuilder &);
  flatbuffers::Offset<LeaveReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LeaveReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<LeaveReply> CreateLeaveReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0) {
  LeaveReplyBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_OBJECT_TYPE = 6,
    VT_OBJECT = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  Any object_type() const {
    return static_cast<Any>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  const void *object() const {
    return GetPointer<const void *>(VT_OBJECT);
  }
  template<typename T> const T *object_as() const;
  const JoinRequest *object_as_JoinRequest() const {
    return object_type() == Any_JoinRequest ? static_cast<const JoinRequest *>(object()) : nullptr;
  }
  const JoinReply *object_as_JoinReply() const {
    return object_type() == Any_JoinReply ? static_cast<const JoinReply *>(object()) : nullptr;
  }
  const LeaveRequest *object_as_LeaveRequest() const {
    return object_type() == Any_LeaveRequest ? static_cast<const LeaveRequest *>(object()) : nullptr;
  }
  const LeaveReply *object_as_LeaveReply() const {
    return object_type() == Any_LeaveReply ? static_cast<const LeaveReply *>(object()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyOffset(verifier, VT_OBJECT) &&
           VerifyAny(verifier, object(), object_type()) &&
           verifier.EndTable();
  }
};

template<> inline const JoinRequest *Message::object_as<JoinRequest>() const {
  return object_as_JoinRequest();
}

template<> inline const JoinReply *Message::object_as<JoinReply>() const {
  return object_as_JoinReply();
}

template<> inline const LeaveRequest *Message::object_as<LeaveRequest>() const {
  return object_as_LeaveRequest();
}

template<> inline const LeaveReply *Message::object_as<LeaveReply>() const {
  return object_as_LeaveReply();
}

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Message::VT_ID, id, 0);
  }
  void add_object_type(Any object_type) {
    fbb_.AddElement<uint8_t>(Message::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object(flatbuffers::Offset<void> object) {
    fbb_.AddOffset(Message::VT_OBJECT, object);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    Any object_type = Any_NONE,
    flatbuffers::Offset<void> object = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_id(id);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_JoinRequest: {
      auto ptr = reinterpret_cast<const JoinRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_JoinReply: {
      auto ptr = reinterpret_cast<const JoinReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LeaveRequest: {
      auto ptr = reinterpret_cast<const LeaveRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_LeaveReply: {
      auto ptr = reinterpret_cast<const LeaveReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const share::common::room::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<share::common::room::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<share::common::room::Message>(nullptr);
}

inline const char *MessageExtension() {
  return "mon";
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<share::common::room::Message> root) {
  fbb.Finish(root);
}

}  // namespace room
}  // namespace common
}  // namespace share

#endif  // FLATBUFFERS_GENERATED_ROOM_SHARE_COMMON_ROOM_H_
